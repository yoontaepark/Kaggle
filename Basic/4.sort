# 4. sort

** 요약
넘파이 summary
a) 넘파이는 파이썬 머신러닝을 구성하는 핵심 기반으로 반드시 이해를 해야함
b) 넘파이 API는 매우 넓은 범위를 다루고 있으므로 머신러닝 어플리케이션을 작성할 때 중요하게 활용될 수 있는 
   핵심 개념 위주로 숙지할 것 
c) 넘파이는 판다스에 비해 친절한 API를 제공하지 않습니다. 2차원의 데이터라면 넘파이보다는 판다스를 쓰는 것이 보다 효율적임


아래의 함수들을 외울 것
1) import numpy as np : 넘파이 라이브러리 호출, np는 코드짤때 쉬우라고 약어로
2) np.sort(변수) : 오름차순으로 변수 array를 sort 한다.
3) np.sort(변수)[::-1]: 내림차순으로 변수 array를 sort 한다. 
4) 변수.sort(): 원행렬 자체를 변환하며, 반환 값은 none임
5) np.sort(변수, axis=n): n차원 array인 경우 지정한 axis 방향으로 sort를 해준다(영향은 전체에 줌)
6) np.argsort(변수) : 행렬 정렬 시 원본 행렬의 인덱스를 출력(값은 정렬이 되는데, 원본 행렬 기준의 인덱스 순서를 출력해준다) 
7) np.argsort(변수)[::-1] : 내림차순 버젼의 인덱스 출력
8) name_array = np.array(['A', 'B', 'C', 'D', 'E'])
   score_array = np.array([30,20,10,50,40])
   score_sort_indices = np.argsort(score_array)
   print(name_array[score_sort_indicies]) : 이 경우 name array의 값이 score array 정렬에 맞춰서 출력이 됨
9) np.dot(A,B): A와 B의 내적, np.transpose(A): A의 전치 


- np.sort(): 원 행렬은 그대로 유지, 정렬된 행렬을 반환
  ndarray.sort(): 원 행렬 자체를 정렬한 형태로 변환하며, 반환 값은 none
  모두 기본적으로 오름차순으로 정렬함. 내림차순으로 정렬하려면 [::-1]을 추가하면 됨
  ex) np.sort()[::-1] 과 같이 사용하면 된다. 
  
- 2차원 배열에서 axis 기반으로 sort()도 가능 
  np.sort(A, axis=0) 이면 위에서 아래 방향을 바꾼다. 
  
- argsort(): 원본 행렬 정렬시 정렬된 행렬의 원래 인덱스를 필요로할때 np.argsort()를 사용함. 
  정렬 행렬의 원본 행렬 인덱스를 ndarray 형으로 반환함
  ex) 인덱스 순서가 0, 1, 2, 3 인 array를 정렬하고나서 보니 1,0,3,2가 되어있다면 해당 인덱스 배열을 출력한다는 소리임
  
- 선형대수 연산 관련 함수들
  np.dot(A,B): 행렬 내적
  np.transpose(A): 전치 행렬
  

- 실습
[1] #정렬의 두가지 방법, 원본유지 정렬(np.sort()), 원본변경 정렬(ndarray.sort())
org_array = np.array([3,1,9,5])
print('원본 행렬:', org_array)

#np.sort()로 정렬
sort_array1 = np.sort(org_array)
print('np.sort() 호출 후 반환된 정렬 행렬:', sort_array1)
print('np.sort() 호출 후 원본 행렬:', org_array)

#ndarray.sort()로 정렬 (여기에서 ndarray는 변수 array를 의미하며, 원본이 바뀌어 버림)
sort_array2 = org_array.sort()
print('org_array.sort() 호출 후 반환된 행렬:', sort_array2)
print('org_array.sort() 호출 후 원본 행렬:', org_array)

[1]-A
원본 행렬: [3 1 9 5]
np.sort() 호출 후 반환된 정렬 행렬: [1 3 5 9]
np.sort() 호출 후 원본 행렬: [3 1 9 5]
org_array.sort() 호출 후 반환된 행렬: None
org_array.sort() 호출 후 원본 행렬: [1 3 5 9]


[2] # 내림차순 정렬하고 싶으면 sort 함수 끝에다가 [::-1] 을 넣으면 된다. 
sort_array1_desc = np.sort(org_array)[::-1]
print('내림차순으로 정렬:', sort_array1_desc)

[2]-A
내림차순으로 정렬: [9 5 3 1]


[3] #다차원 공간의 axis 방향으로 정렬하기, sort(변수, axis=n) 
array2d = np.array([[8, 12], 
                   [7,1]])
sort_array2d_axis0 = np.sort(array2d, axis=0)
print('Row 방향으로 정렬:\n', sort_array2d_axis0)

sort_array2d_axis1 = np.sort(array2d, axis=1)
print('Column 방향으로 정렬:\n', sort_array2d_axis1)

[3]-A
Row 방향으로 정렬:
 [[ 7  1]
 [ 8 12]]
Column 방향으로 정렬:
 [[ 8 12]
 [ 1  7]]


[4] #argsort: 값 정렬시 값이 아닌 인덱스의 변화를 출력해줌 
org_array = np.array([3,1,9,5])
print(np.sort(org_array))

sort_indices = np.argsort(org_array)
print(type(sort_indices))
print('행렬 정렬 시 원본 행렬의 인덱스:', sort_indices)

[4]-A
[1 3 5 9]
<class 'numpy.ndarray'>
행렬 정렬 시 원본 행렬의 인덱스: [1 0 3 2]


[5] #argsort의 내림차순 적용, 위에 언급한 내림차순과 동일하게 [::-1]을 추가해주면 된다. 
org_array = np.array([3,1,9,5])
print(np.sort(org_array)[::-1])

sort_indices_desc = np.argsort(org_array)[::-1]
print('행렬 내림차순 정렬 시 원본 행렬의 인덱스:', sort_indices_desc)

[5]-A
[9 5 3 1]
행렬 내림차순 정렬 시 원본 행렬의 인덱스: [2 3 0 1]


[6] 해당 posting에서 가장 중요한 예제, a변수를 오름차순한 인덱스를 argsort를 통해 확보한 후, 
    b변수[argsort값]을 출력하면 a변수의 정렬된 값에 대응하는 b변수의 값들을 출력할 수 있다. 

#argsort 사용 예시
name_array = np.array(['John', 'Mike', 'Sarah', 'Kate', 'Samuel'])
score_array = np.array([78,95,84,98,88])

#score_array의 정렬된 값에 해당하는 원본 행렬 위치 인덱스를 반환하고, 이를 이용하여 name_array에서 name값 추출
sort_indices = np.argsort(score_array)
print("sort indices:", sort_indices)

#print(name_array[[0, 2, 4, 1, 3]])
print(name_array[sort_indices])

#print(score_array[[0, 2, 4, 1, 3]])
print(score_array[sort_indices])

[6]-A
sort indices: [0 2 4 1 3]
['John' 'Sarah' 'Samuel' 'Mike' 'Kate']
[78 84 88 95 98]


[7] #내적, 전치
A = np.array([[1,2,3],
             [4,5,6]])
B = np.array([[7,8],
              [9,10],
              [11,12]])

print('행렬 내적 결과:\n', np.dot(A, B))

A = np.array([[1,2],
             [3,4]])
print(np.transpose(A))

[7]-A
행렬 내적 결과:
 [[ 58  64]
 [139 154]]
 
 [[1 3]
 [2 4]]
