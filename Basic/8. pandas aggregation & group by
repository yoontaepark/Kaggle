*요약


- Aggregation 함수
a. sum(), max(), min(), count() 등의 함수는 DataFrame/Series에서 집합(Aggregation)연산을 수행
b. DataFrame의 경우 DataFrame에서 바로 aggregation을 호출할 경우 모든 컬럼에 해당 aggregation을 적용 

- axis에 따른 Aggregation 함수 결과
a. default는 axis=0임
b. axis=0 이면, 쭉 내려간다(행들의 합), axis=1이면 오른편으로 쭉 간다(열들의 합)

- DataFrame groupby
a. DataFrame은 group by 연산을 위해 groupby() method를 제공
b. groupby() method는 by인자로 group by 하려는 컬럼명을 입력받으면 DataFrameGroupBy 객체를 반환
c. 반환된 DataFrameGroupBy객체에 aggregation 함수를 수행

- 실습
[1] #NaN 값은 count()에서 제외됨
titanic_df.count()
↓
PassengerId    891
Survived       891
Pclass         891
Name           891
Sex            891
Age            714
SibSp          891
Parch          891
Ticket         891
Fare           891
Cabin          204
Embarked       889
dtype: int64


[2] #특정 컬럼들로 Aggregation 함수 수행, 전 컬럼에 대한 연산하고 싶으면 컬럼리스트빼고 바로 .연산 쓰면 됨
titanic_df[['Age', 'Fare']].mean(axis=0) #axis=0은 default 값이기 때문에 빼고 써도 똑같은 값이 나옴
↓
Age     29.699118
Fare    32.204208
dtype: float64

[2-1]
titanic_df[['Age', 'Fare']].sum()
↓
Age     21205.1700
Fare    28693.9493
dtype: float64

[2-2]
titanic_df[['Age', 'Fare']].count()
↓
Age     714
Fare    891
dtype: int64

[3] #groupby(by='컬럼명') 이런식으로 사용, 여러개 쓰고 싶으면 by=[list], DataFrame에 groupby()를 호출하면 DataFrameGroupBy 객체를 반환
titanic_groupby = titanic_df.groupby(by='Pclass')
print(type(titanic_groupby))
print(titanic_groupby)
↓
<class 'pandas.core.groupby.generic.DataFrameGroupBy'>
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000205634FACA0>

[4] #위에처럼 DataFrameGroupBy객체를 만든다음에 Aggregation함수를 호출하여 group by를 수행
# 사실 ()안에 by는 안써도 된다
# ()안에 들어가는 컬럼이 index화되면서 컬럼에서는 제외된다

titanic_groupby2 = titanic_df.groupby(['Pclass', 'Sex']).count() #groupby 함수를 통해 DataFrameGroupBy 객체를 만들고 거기에 사칙연산을 하면 DataFrame으로 바뀜
titanic_groupby2
↓
	PassengerId	Survived	Name	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
Pclass	Sex										
1	female	94	94	94	85	94	94	94	94	81	92
male	122	122	122	101	122	122	122	122	95	122
2	female	76	76	76	74	76	76	76	76	10	76
male	108	108	108	99	108	108	108	108	6	108
3	female	144	144	144	102	144	144	144	144	6	144
male	347	347	347	253	347	347	347	347	6	347

[5] # index화 된만큼 컬럼수가 줄어든 모습
print(type(titanic_groupby2))
print(titanic_groupby2.shape)
print(titanic_groupby2.index)
↓
<class 'pandas.core.frame.DataFrame'>
(6, 10)
MultiIndex([(1, 'female'),
            (1,   'male'),
            (2, 'female'),
            (2,   'male'),
            (3, 'female'),
            (3,   'male')],
           names=['Pclass', 'Sex'])


[6] #이런식으로 인덱스에 쓸놈은 ()에, 보고싶은 컬럼만 추리고 싶으면 []안에, 그 컬럼이 복수개라면 [[]] 이런식으로 안에 리스트를 넣어줄 것
# 참고로, ()[] 이렇게 막 컬럼 넣어두면 헷갈리니, (by=)['컬럼명'] 이런식으로 구분해도 좋겠음

titanic_groupby3 = titanic_df.groupby(by='Pclass')[['PassengerId', 'Survived']].count()
titanic_groupby3
↓
	PassengerId	Survived
Pclass		
1	216	216
2	184	184
3	491	491

[6-2] # 위에꺼에서 순서바꿔도 결과는 같다, 단지 인덱스로 쓸놈을 컬럼란에도 한번 더 넣어줘야 한다. 순서상 Pclass라는 놈이 있고 그걸 index로 쓴다는 소리

titanic_df[['Pclass','PassengerId', 'Survived']].groupby(by='Pclass').count()
↓
	PassengerId	Survived
Pclass		
1	216	216
2	184	184
3	491	491


[7] # groupby의 index화할 대상 값만 보고 싶을수도 있음
titanic_df.groupby('Pclass')['Pclass'].count()
↓
Pclass
1    216
2    184
3    491
Name: Pclass, dtype: int64

[7-2] #groupby를 굳이 안쓰고 value_counts() 함수를 써도 된다
titanic_df['Pclass'].value_counts()
↓
3    491
1    216
2    184
Name: Pclass, dtype: int64

[8] # groupby하고나서 여러개의 산식을 쓰고 싶을때(그러니까 여러개의 aggregation 함수를 적용하고 싶을 때)
# .agg([max, min]) 이런식으로 함수쓰면 된다
# 컬럼과 .agg순서에 따라 표현하고 싶은거 표현가능

titanic_df.groupby('Pclass')['Age'].agg([max,min,sum])
↓
max	min	sum
Pclass			
1	80.0	0.92	7111.42
2	70.0	0.67	5168.83
3	74.0	0.42	8924.92

[8-2] #다중컬럼이나 aggregation함수는 동일할때는 컬럼을 리스트로 만들어서 넣어주면 된다. 
titanic_df.groupby('Pclass')[['Age','Fare']].agg([max,min,sum])
↓
	Age	Fare
max	min	sum	max	min	sum
Pclass						
1	80.0	0.92	7111.42	512.3292	0.0	18177.4125
2	70.0	0.67	5168.83	73.5000	0.0	3801.8417
3	74.0	0.42	8924.92	69.5500	0.0	6714.6951


[9] # 복잡한 형태로, 컬럼마다 다른 aggregation 함수를 적용하고 싶을때
# 딕셔너리 만든다음에 .agg()안에다가 넣는다
agg_format = {'Age':'max', 'SibSp':'min', 'Fare':'mean'}
titanic_df.groupby('Pclass').agg(agg_format)
↓
	Age	SibSp	Fare
Pclass			
1	80.0	0	84.154687
2	70.0	0	20.662183
3	74.0	0	13.675550
