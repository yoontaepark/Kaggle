# 6. pandas dataframe to others

** 요약
아래의 함수들을 외울 것


- DataFrame과 리스트, 딕셔너리, 넘파이 ndarray 상호 변환
a) list -> DataFrame: 
   df_list1 = pd.DataFrame(list, columns=col_name1)
   DateFrame 생성 인자로 리스트 객체와 매핑되는 컬럼명들을 입력한다. 

b) ndarray -> DataFrame: 
   df_array2 = pd.DataFrame(array2, columns=col_name2)
   DataFrame 생성 인자로 ndarray와 매핑되는 컬럼명들을 입력
   
c) dict -> DataFrame:
   dict = {'col1':[1,11], 'col2':[2,22], 'col3':[3,33]}
   df_dict = pd.DataFrame(dict)
   딕셔너리의 키(key)로 컬럼명, 값(value)을 리스트 형식으로 입력
 
d) DataFrame -> ndarray:
   DataFrame 객체의 values 속성을 이요하여 ndarray로 변환
   
e) DataFrame -> list:
   DataFrame 객체의 values 속성을 이용하여 먼저 ndarray로 변환 후 tolist()를 이용하여 list로 변환
   
f) DataFrame -> dict:
   DataFrame 객체의 to_dict()를 이용하여 변환
   

- DataFrame 데이터 삭제 : drop()을 쓰자, 그리고 inplace는 하나 기준 정해서 쓰자
  DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')
  axis: DataFrame의 row를 삭제할 때는 axis=0, Column을 삭제할 때는 axis=1로 설정
  원본 DataFrame은 유지하고 드롭된 DataFrame을 새롭게 객체변수로 받고 싶다면 inplace=False로 설정(Default값이 false임) 
   ex) titanic_drop_df = titanic_df.drop('Age_0', axis=1, inplace=False) # inplace 안넣었어도 default라 먹었을 것 
  원본 DataFrame에 드롭된 결과를 적용할 경우(즉, 원본데이터 바꾸려면) inplace = True를 적용
   ex) titanic_df.drop('Age_0', axis=1, inplace=True)


- Index: 
a) 판다스의 index 객체는 RDBMS의 PK(Primary Key)와 유사하게 DataFrame, Series의 레코드를 고유하게 식별하는 개체임
b) DataFrame, Series에서 index 객체만 추출하려면 DataFrame.index 또는 Series.index 속성을 통해 가능
c) Series 객체는 index 객체를 포함하지만 Series 객체에 연산 함수를 적용할 때 index는 연산에서 제외됨. 
   Index는 오직 식별용으로만 사용됨.
d) DataFrame 및 Series에 reset_index() 메서드를 수행하면 새롭게 인덱스를 연속 숫자형으로 할당하며 기존 인덱스는 'index'라는 새로운 컬럼 명으로 추가됨


- DataFrame의 컬럼 데이터셋 Access
  DataFrame의 컬럼 데이터 셋 생성과 수정은 [] 연산자를 이용해 쉽게 할 수 잇음. 새로운 컬럼에 값을 할당하려면 DataFrame[] 내에 새로운 컬럼명을 입력하고 
  값을 할당해주기만 하면 됨 
  

- 실습
[1] #리스트,ndarray에서 DataFrame 변환
import numpy as np
import pandas as pd

col_name1 = ['col1']
list1 = [1,2,3]
array1 = np.array(list1)

print('array1 shape:', array1.shape) #당연히 1차원이 나옴
df_list1 = pd.DataFrame(list1, columns=col_name1)
print('1차원 리스트로 만든 DataFrame:\n', df_list1)
df_array1 = pd.DataFrame(array1, columns=col_name1)
print('1차원 ndarray로 만든 DataFrame"\n', df_array1)

[1]-A
array1 shape: (3,)
1차원 리스트로 만든 DataFrame:
    col1
0     1
1     2
2     3
1차원 ndarray로 만든 DataFrame"
    col1
0     1
1     2
2     3


[2] 
# 3개의 컬럼명이 필요함
col_name2 = ['col1', 'col2', 'col3']

# 2행x3열 형태의 리스트와 ndarray를 생성한 후 이를 각각 DataFrame으로 변환
list2 = [[1,2,3],
         [11,12,13]]
array2 = np.array(list2)
print('array2 shape:', array2.shape)
df_list2 = pd.DataFrame(list2, columns=col_name2)
print('2차원 리스트로 만든 DataFrame:\n', df_list2)
df_array1 = pd.DataFrame(array2, columns=col_name2)
print('2차원 ndarray로 만든 DataFrame:\n', df_array1)

[2]-A
array2 shape: (2, 3)
2차원 리스트로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    12    13
2차원 ndarray로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    12    13


[3] #딕셔너리(dict)에서 DataFrame 변환
# key는 컬럼명으로 매핑, Value는 리스트 형(또는 ndarray)
dict = {'col1':[1,11], 'col2':[2,22], 'col3':[3,33]}
df_dict = pd.DataFrame(dict)
print('딕셔너리로 만든 DataFrame:\n', df_dict)

[3]-A
딕셔너리로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    22    33


[4] #DataFrame을 ndarray로 변환
#DataFrame을 ndarray로 변환, dataframe.values를 넣으면 된다
array3 = df_dict.values
print('df_dict.values 타입:', type(array3), 'df_dict.values shape:', array3.shape)
print(array3)

[4]-A
df_dict.values 타입: <class 'numpy.ndarray'> df_dict.values shape: (2, 3)
[[ 1  2  3]
 [11 22 33]]
 
 
[5] #DataFrame을 리스트와 딕셔너리로 변환
#DataFrame을 리스트로 변환
list3 = df_dict.values.tolist()
print('df_dict.values.tolist() 타입:', type(list3))
print(list3)

#DataFrame을 딕셔너리로 변환
dict3 = df_dict.to_dict('list')
print('\n df_dict.to_dict() 타입:', type(dict3))
print(dict3)

[5]-A
df_dict.values.tolist() 타입: <class 'list'>
[[1, 2, 3], [11, 22, 33]]

 df_dict.to_dict() 타입: <class 'dict'>
{'col1': [1, 11], 'col2': [2, 22], 'col3': [3, 33]}
 

[6] #DataFrame의 컬럼 데이터 셋 Access: titanic_df['Age_0'] = 0 이런식으로 []추가하고 초기화까지 하면 된다. 
titanic_df = pd.read_csv('titanic_train.csv')
titanic_df['Age_0'] = 0
titanic_df.head(3)

[6]-A
	PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked	Age_0
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S	0
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C	0
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S	0


[7] #기존 컬럼을 활용해서 새로운 컬럼을 만들수도 있다. 
titanic_df['Age_by_10'] = titanic_df['Age']*10
titanic_df['Family_No'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1
titanic_df.head(3)

[7]-A
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked	Age_0	Age_by_10	Family_No
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S	0	220.0	2
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C	0	380.0	2
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S	0	260.0	1


[8] #기존 컬럼에 값을 업데이트 하려면 해당 컬럼에 업데이트값을 그대로 지정하면 됨
titanic_df['Age_by_10'] = titanic_df['Age_by_10'] + 100
titanic_df.head(3)

[8]-A
	PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked	Age_0	Age_by_10	Family_No
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S	0	320.0	2
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C	0	480.0	2
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S	0	360.0	1


[9] #DataFrame 데이터 삭제, 그 중 axis에 따른 삭제. axis=0 이 default이므로 보통 열을 지우려면 axis=1도 추가 지정해둬야 함
# drop() 함수 inplace인자의 default는 false임. 이 경우 원함수는 영향없음
titanic_drop_df = titanic_df.drop('Age_0', axis=1)
titanic_drop_df.head(3)

[9]-A
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked	Age_by_10	Family_No
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S	320.0	2
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C	480.0	2
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S	360.0	1

[9-1]
titanic_df.head(3)
	PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked	Age_0	Age_by_10	Family_No
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S	0	320.0	2
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C	0	480.0	2
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S	0	360.0	1


[10] #여러개의 컬럼 삭제는 삭제 컬럼들을 리스트로 입력하면 됨. inplace=True인 경우 원함수가 삭제되고, 반환시키면 값은 none이 나옴
drop_result = titanic_df.drop(['Age_0', 'Age_by_10', 'Family_No'], axis=1, inplace=True)
print('inplace=True로 drop 후 반환된 값', drop_result)
titanic_df.head(3)

[10]-A
inplace=True로 drop 후 반환된 값 None
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S





   
   
   
