# 6. pandas dataframe to others

** 요약
아래의 함수들을 외울 것


- DataFrame과 리스트, 딕셔너리, 넘파이 ndarray 상호 변환
a) list -> DataFrame: 
   df_list1 = pd.DataFrame(list, columns=col_name1)
   DateFrame 생성 인자로 리스트 객체와 매핑되는 컬럼명들을 입력한다. 

b) ndarray -> DataFrame: 
   df_array2 = pd.DataFrame(array2, columns=col_name2)
   DataFrame 생성 인자로 ndarray와 매핑되는 컬럼명들을 입력
   
c) dict -> DataFrame:
   dict = {'col1':[1,11], 'col2':[2,22], 'col3':[3,33]}
   df_dict = pd.DataFrame(dict)
   딕셔너리의 키(key)로 컬럼명, 값(value)을 리스트 형식으로 입력
 
d) DataFrame -> ndarray:
   DataFrame 객체의 values 속성을 이요하여 ndarray로 변환
   
e) DataFrame -> list:
   DataFrame 객체의 values 속성을 이용하여 먼저 ndarray로 변환 후 tolist()를 이용하여 list로 변환
   
f) DataFrame -> dict:
   DataFrame 객체의 to_dict()를 이용하여 변환
   

- DataFrame 데이터 삭제 : drop()을 쓰자, 그리고 inplace는 하나 기준 정해서 쓰자
  DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')
  axis: DataFrame의 row를 삭제할 때는 axis=0, Column을 삭제할 때는 axis=1로 설정
  원본 DataFrame은 유지하고 드롭된 DataFrame을 새롭게 객체변수로 받고 싶다면 inplace=False로 설정(Default값이 false임) 
   ex) titanic_drop_df = titanic_df.drop('Age_0', axis=1, inplace=False) # inplace 안넣었어도 default라 먹었을 것 
  원본 DataFrame에 드롭된 결과를 적용할 경우(즉, 원본데이터 바꾸려면) inplace = True를 적용
   ex) titanic_df.drop('Age_0', axis=1, inplace=True)


- Index: 
a) 판다스의 index 객체는 RDBMS의 PK(Primary Key)와 유사하게 DataFrame, Series의 레코드를 고유하게 식별하는 개체임
b) DataFrame, Series에서 index 객체만 추출하려면 DataFrame.index 또는 Series.index 속성을 통해 가능
c) Series 객체는 index 객체를 포함하지만 Series 객체에 연산 함수를 적용할 때 index는 연산에서 제외됨. 
   Index는 오직 식별용으로만 사용됨.
d) DataFrame 및 Series에 reset_index() 메서드를 수행하면 새롭게 인덱스를 연속 숫자형으로 할당하며 기존 인덱스는 'index'라는 새로운 컬럼 명으로 추가됨


- 실습
[1] #리스트,ndarray에서 DataFrame 변환
import numpy as np
import pandas as pd

col_name1 = ['col1']
list1 = [1,2,3]
array1 = np.array(list1)

print('array1 shape:', array1.shape) #당연히 1차원이 나옴
df_list1 = pd.DataFrame(list1, columns=col_name1)
print('1차원 리스트로 만든 DataFrame:\n', df_list1)
df_array1 = pd.DataFrame(array1, columns=col_name1)
print('1차원 ndarray로 만든 DataFrame"\n', df_array1)

[1]-A
array1 shape: (3,)
1차원 리스트로 만든 DataFrame:
    col1
0     1
1     2
2     3
1차원 ndarray로 만든 DataFrame"
    col1
0     1
1     2
2     3


[2] 
# 3개의 컬럼명이 필요함
col_name2 = ['col1', 'col2', 'col3']

# 2행x3열 형태의 리스트와 ndarray를 생성한 후 이를 각각 DataFrame으로 변환
list2 = [[1,2,3],
         [11,12,13]]
array2 = np.array(list2)
print('array2 shape:', array2.shape)
df_list2 = pd.DataFrame(list2, columns=col_name2)
print('2차원 리스트로 만든 DataFrame:\n', df_list2)
df_array1 = pd.DataFrame(array2, columns=col_name2)
print('2차원 ndarray로 만든 DataFrame:\n', df_array1)

[2]-A
array2 shape: (2, 3)
2차원 리스트로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    12    13
2차원 ndarray로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    12    13


[3] #딕셔너리(dict)에서 DataFrame 변환
# key는 컬럼명으로 매핑, Value는 리스트 형(또는 ndarray)
dict = {'col1':[1,11], 'col2':[2,22], 'col3':[3,33]}
df_dict = pd.DataFrame(dict)
print('딕셔너리로 만든 DataFrame:\n', df_dict)

[3]-A
딕셔너리로 만든 DataFrame:
    col1  col2  col3
0     1     2     3
1    11    22    33


[4]










   
   
   
