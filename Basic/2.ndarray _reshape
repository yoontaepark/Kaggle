#2. 넘파이 배열 ndarray 초기화 방법과 ndarray 차원과 크기를 변경하는 reshape()의 이해

- 초기화
arange(), zeros(), ones()를 이용해 초기화
np.arange(10) = [0 1 2 3 4 5 6 7 8 9]
-> 가장 기본적인 초기화 형태임 

np.zeros((3,2)) = [[0. 0.] [0. 0.] [0. 0.]]
np.ones((3,2), dtype='int32') = [[1 1] [1 1] [1 1]]
-> dtype을 넣으면 그 형태로 변환되고 기본적으로는 실수형으로 나옴 

reshape()로 차원과 크기를 변경, -1 넣으면 그쪽 axis는 나머지를 채워달라라는 소리
-> 보통 차원 변환이 꼭 필요한 경우 사용
array1 = np.arange(10)
array1.reshape(2,5) = [[0 1 2 3 4] [5 6 7 8 9]] 

array1d = [0 1 2 3 4]
array1d.reshape(-1,1) = [[0] [1] [2] [3] [4]] 로 바뀜, 2차원이되 컬럼 axis크기가 1로 고정됨
array1d.reshape(-1, ) = [0 1 2 3 4] 1차원으로 바뀜


- 실습
[1] //arange로 초기화한 배열을 출력하면, 1차원 정수형 배열이 나옴
sequence_array = np.arange(10)
print(sequence_array)
print(sequence_array.dtype, sequence_array.shape)

[1-r]
[0 1 2 3 4 5 6 7 8 9]
int32 (10,)


[2]
zero_array = np.zeros((3,2), dtype='int32')
print(zero_array)
print(zero_array.dtype, zero_array.shape)

one_array = np.ones((3,2))
print(one_array)
print(one_array.dtype, one_array.shape)

[2-r]
[[0 0]
 [0 0]
 [0 0]]
int32 (3, 2)
[[1. 1.]
 [1. 1.]
 [1. 1.]]
float64 (3, 2)


[3]
array1 = np.arange(10)
print('array1:\n', array1)

array2 = array1.reshape(2,5)
print('array2:\n', array2)

array3 = array1.reshape(5,2)
print('array3:\n', array3)

[3-r]
array1:
 [0 1 2 3 4 5 6 7 8 9]
array2:
 [[0 1 2 3 4]
 [5 6 7 8 9]]
array3:
 [[0 1]
 [2 3]
 [4 5]
 [6 7]
 [8 9]]
 
 
 [4] //변환할 수 없는 shape 구조를 입력하면 오류 발생
 array1.reshape(4,3) 
 
 
 [5] // -1은 그냥 나머지를 맞춰주는 변수 라고 생각하자
array1 = np.arange(10)
print(array1)

array2 = array1.reshape(-1,5)
print('array2 shape:', array2.shape)
print('array2:\n', array2)

array3 = array1.reshape(5,-1)
print('array3 shape:', array3.shape)
print('array3:\n', array3)

[5-r]
[0 1 2 3 4 5 6 7 8 9]
array2 shape: (2, 5)
array2:
 [[0 1 2 3 4]
 [5 6 7 8 9]]
array3 shape: (5, 2)
array3:
 [[0 1]
 [2 3]
 [4 5]
 [6 7]
 [8 9]]


[6] //-1의 쓰임, 1차원 배열을 2차원으로, 혹은 2차원을 1차원으로 변환시 사용

array1 = np.arange(5)
//2차원으로 변환
array2d_1 = array1.reshape(-1,1)
print('array2d_1 shape:', array2d_1.shape)
print('array2d_1:\n', array2d_1)

//1차원으로 변환
array1d = array1.reshape(-1,)
print('array1d shape:', array1d.shape)
print('array1d:\n', array1d)

array2d_1 shape: (5, 1)
array2d_1:
 [[0]
 [1]
 [2]
 [3]
 [4]]
array1d shape: (5,)
array1d:
 [0 1 2 3 4]
 
 
 [7] /-1을 쓰더라도 변환불가한 형태면 에러남
array1 = np.arange(10)
array2 = array1.shape(-1,4)

//반드시 -1값은 1개
array1.reshape(-1,-1)
