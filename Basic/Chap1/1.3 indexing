# 3.indexing

** 요약:
아래의 함수들을 외울 것
1) import numpy as np : 넘파이 라이브러리 호출, np는 코드짤때 쉬우라고 약어로
2) 변수[숫자] : 배열의 숫자에 해당하는 값을 인덱싱, -1이면 뒤에서 첫번째 
3) 변수[:] : 슬라이싱 기법으로 배열전체를 의미, 변수[3:] : 3이상, 변수[시작:끝] 시작이상 끝미만 
4) 변수[a,b,c] : 팬시 인덱싱, 이 경우 a,b,c에 해당하는 값들만 출력됨
5) print(변수(변수>5)): 불린 인덱싱, 이 경우 true에 해당하는 값들만 출력됨


- ndarray에서 데이터 세트 선택: 인덱싱(indexing)
Slicing, Fancy Indexing, Boolean Indexing(중요!!)

- 단일값을 가지고 오려면 변수[숫자] 를 넣으면 된다, 맨뒤는 변수[-1], 그 앞은 변수[-2] 이순서
- 2차원의 경우 변수[0,0], 변수[0,1] .. 이런식으로 추출하면 된다 

- 슬라이싱: ':" 을 이용하여 연속된 값을 선택
  ex) 변수[:] : 배열 전체, 배열[:3] : 3미만, 그러니까 0,1,2번 배열 
      변수[3:] : 3이상, 3번 배열부터 끝까지, 배열[0:3] : 0이상 3미만, 0,1,2번 배열  
      ** 3x3 2차원 배열이라고 하면, 
      변수[0:2, 0:2] = (0,0), (0,1), (1,0), (1,1)
      변수[1:3, 0:3] = (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)
      변수[1:3, :] = (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)
      변수[:, :] = 전체
      변수[:2, 1:] = (0,1), (0,2), (1,1), (1,2)
      변수[:2, 0] = (0,0), (1,0) //열에는 명확하게 0만 고르기

- 팬시 인덱싱(Fancy Indexing): 리스트나 ndarray로 인덱스 집합을 지정하면 해당 위치의 인덱스에 해당하는 ndarray를 반환하는 인덱싱 방식
  ex) 변수[[2,4,7]] = 리스트의 2번, 4번, 7번 값을 추출한다. 
  ** 3x3 2차원 배열이라고 하면, 
  변수[[0,1],2] = (0,2), (1,2)
  변수[[0,1], 0:2] = (0,0), (0,1), (1,0), (1,1)
  변수[[0,1]] = 비었다는거는 다 포함해라라는 뜻, (0,0), (0,1), (0,2), (1,0), (1,1), (1,2) 
  
- 불린 인덱싱(Boolean indexing): 조건 필터링과 검색을 동시에 할 수 있음(많이많이씀)
ex) ndarray 내의 값이 5보다 큰 ndarray를 추출하고 싶다면? array1[array1>5] 이런식으로 쓰면 됨


- 실습
[1] # 범위를 줘서 array 생성 후, 특정 위치 인덱싱하면 됨, 대게 시작은 이상, 끝은 미만
array1 = np.arange(start=1, stop=10)
print('array1:', array1)

value = array1[2]
print('value:', value)
print(type(value))

[1]-A
array1: [1 2 3 4 5 6 7 8 9]
value: 3
<class 'numpy.int32'>


[2] # 인덱스에 -1을 넣었을 때, 인덱스 값 다른값으로 초기화하기 
print['맨 뒤의 값:', array1[-1], '맨 뒤에서 두번째 값:', array1[-2])
array1[0] = 9
array1[8] = 0
print('array1:', array1)

[2]-A
맨 뒤의 값: 9, 맨 뒤에서 두번째 값: 9
array1: [9 2 3 4 5 6 7 8 0]


[3] #2차원에서 인덱싱하는 법
array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3,3)
print(array2d)
print('(row=0,col=0) index 가리키는 값:', array2d[0,0])
print('(row=0,col=1) index 가리키는 값:', array2d[0,1])
print('(row=1,col=0) index 가리키는 값:', array2d[1,0])
print('(row=2,col=2) index 가리키는 값:', array2d[2,2])

[3]-A
[[1 2 3]
 [4 5 6]
 [7 8 9]]
(row=0,col=0) index 가리키는 값: 1
(row=0,col=1) index 가리키는 값: 2
(row=1,col=0) index 가리키는 값: 4
(row=2,col=2) index 가리키는 값: 9


[4] # Slicing(슬라이싱), 변수[시작점:끝점-1]을 설정하면 구간의 array가 뽑힘 
array1 = np.arange(start=1, stop=10)
print(array1)
array3 = array1[0:3]
print(array3)
print(type(array3))

[4]-A
[1 2 3 4 5 6 7 8 9]
[1 2 3]
<class 'numpy.ndarray'>


[5] # Slicing2, 공란은 전부를 의미함
array1 = np.arange(start=1, stop=10)
array4 = array1[:3] #0,1,2
print(array4)

array5 = array1[3:]
print(array5)

array6 = array1[:]
print(array6)

[5]-A
[1 2 3]
[4 5 6 7 8 9]
[1 2 3 4 5 6 7 8 9]


[6] #2차원 slicing 
array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3,3)
print('array2d:\n', array2d)

print(array2d[0:2, 0:2]) #
print(array2d[1:3, 0:3])
print(array2d[1:3, :])
print(array2d[:, :])
print(array2d[:2, 1:])
print(array2d[:2, 0]) #특이할 점으로 [1 4] 이렇게 뽑힌다. 이건 :으로 다중이 아니라서 한줄로 나오는 듯

[6]-A
array2d:
 [[1 2 3]
 [4 5 6]
 [7 8 9]]
 
[[1 2]
 [4 5]]
 
[[4 5 6]
 [7 8 9]]
 
[[4 5 6]
 [7 8 9]]
 
[[1 2 3]
 [4 5 6]
 [7 8 9]]
 
[[2 3]
 [5 6]]
 
[1 4]


[7] #팬시 인덱싱(fancy indexing), [위치1, 위치2] 이런식으로 원하는 위치만 인덱싱 할 수 있다. 변수.tolist()는 배열을 표현하는 또다른 방식
array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3,3)
print(array2d, '\n')

array3 = array2d[[0,1],2]
print(array3) # 걍 전체 리스트를 보고 싶을 때 
print(array3.tolist(),'\n') #개별항목을 뽑을 때

array4 = array2d[[0,2],0:2]
print(array4) # 걍 전체 리스트를 보고 싶을 때 
print(array4.tolist(),'\n') #개별항목을 뽑을 때

array5 = array2d[[0,1]]
print(array5) # 걍 전체 리스트를 보고 싶을 때 
print(array5.tolist()) #개별항목을 뽑을 때

[7]-A
[[1 2 3]
 [4 5 6]
 [7 8 9]] 

[3 6]
[3, 6] 

[[1 2]
 [7 8]]
[[1, 2], [7, 8]] 

[[1 2 3]
 [4 5 6]]
[[1, 2, 3], [4, 5, 6]]


[8] #불린 인덱싱(boolean indexing), true=1 인 값들만 받아서 출력하는 기능

array1d = np.arange(start=1, stop=10)
print(array1d)

print(array1d>5) #인덱싱 없이 넣으면 boolean 값이 나온다(true or false)
var1 = array1d>5
print('var1:', var1)
print(type(var1))

#[]안에 array1d>5 Boolean indexing을 적용
print(array1d)
array3 = array1d[array1d>5]
print('array1d>5 boolean indexing result:', array3)

boolean_indexes = np.array([False, False, False, False, False, True, True, True, True])
array3 = array1d[boolean_indexes]
print('Boolean indexing filtering result:', array3)

indexes = np.array([5,6,7,8])
array4 = array1d[indexes]
print('일반 인덱스로 필터링 결과:', array4)

#boolean 인덱싱 안쓴다면...
array1d = np.arange(start=1, stop=10)
target= [] #array 빈통 만들기

for i in range(0,9): #i값을 0부터 9까지 (between(양쪽등호 모두 포함))
    if array1d[i] > 5:
        target.append(array1d[i]) #append로 array 채우기
array_selected = np.array(target)
print('boolean 인덱싱 안쓰고 if문으로 해결할 경우:', array_selected)       

print(array1d[array1d>5]) #매우 자주쓰는 형태임, 꼭 암기하자

[8]-A
[1 2 3 4 5 6 7 8 9]
[False False False False False  True  True  True  True]
var1: [False False False False False  True  True  True  True]
<class 'numpy.ndarray'>
[1 2 3 4 5 6 7 8 9]
array1d>5 boolean indexing result: [6 7 8 9]
Boolean indexing filtering result: [6 7 8 9]
일반 인덱스로 필터링 결과: [6 7 8 9]
boolean 인덱싱 안쓰고 if문으로 해결할 경우: [6 7 8 9]
[6 7 8 9]

