


- Data selection & filtering 
a. []: 컬럼 기반 필터링 또는 불린 인덱싱 필터링 제공 // 나, 데이터 필터링할거야! 라는 기호임
b. ix[], loc[], iloc[] : ()가 아니다, 명칭/위치 기반 인덱싱을 제공하는데 좀 헷갈림
c. 불린 인덱싱(Boolean Indexing): 조건식에 따른 필터링을 제공

- ix, loc, iloc ix
*index 값 자체는 명칭기반으로 볼 것.
a. ix[]: 명칭+위치 기반 인덱싱 -> 후술하겠지만 사라졌음 (xxx)
b. loc[]: 명칭 기반 인덱싱, 컬럼(열)의 명칭을 기반으로 위치를 지정하는 방식. '컬럼명' 같이 명칭으로 열 위치를 지정하는 방식
c. iloc[]: 위치 기반 인덱싱, 0을 출발점으로 하는 가로축, 세로축 좌표 기반의 행/열 위치를 기반으로 데이터를 지정. 행/열 위치값으로 정수가 입력됨

- boolean indexing(중요!!) 
위치기반, 명칭기반 모두 사용할 필요 없이 조건식을 []안에 기입하여 간편하게 필터링을 수행
ex) titanic_boolean = titanic_df[titanic_df['Age']>60]

-실습
[1] # DataFrame의 연산자
# 넘파이에서 [] 연산자는 행의 위치, 열의 위치, 슬라이싱 범위 등을 지정해 데이터를 가져올 수 있음
# DataFrame(판다스)에서 []안에 들어갈 수 있는 것은 컬럼 명 문자(또는 컬럼 명의 리스트 객체), 또는 인덱스로 변환 가능한 표현식
# 그냥, DataFrame에서 []안에 인덱스(그러니까 숫자) 넣지말자

import pandas as pd
titanic_df = pd.read_csv('titanic_train.csv')
print('단일 컬럼 데이터 추출:\n', titanic_df['Pclass'].head(3))
print('\n여러 컬럼들의 데이터 추출:\n', titanic_df[['Survived', 'Pclass']].head(3))
print('[] 안에 숫자 index는 KeyError 오류 발생:\n', titanic_df[0]) 

[1]-A
단일 컬럼 데이터 추출:
 0    3
1    1
2    3
Name: Pclass, dtype: int64

여러 컬럼들의 데이터 추출:
    Survived  Pclass
0         0       3
1         1       1
2         1       3
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)


[2] # 판다스의 index 형태로 변환가능한 표현식은 []내에 입력할 수 있긴 함
# 예를들어, titanic_df의 처음 2개 데이터를 추출하고자 titanic_df[0:2] 와 같은 슬라이싱을 이용하였다면 정확히 원하는 결과를 반환해줌
# 근데 이런거 쓰지말자(헷갈림) 
titanic_df[0:2]

[2]-A
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C


[3] # []내에 조건식을 입력하여 불린 인덱싱을 수행할수 있음. 
# DataFrame 바로 뒤에 있는 [] 안에 들어갈 수 있는 것은 컬럼명과 불린인덱싱으로 범위를 좁혀서 코딩할 것 
titanic_df[titanic_df['Pclass'] == 3].head(3)

[3]-A
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.250	NaN	S
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.925	NaN	S
4	5	0	3	Allen, Mr. William Henry	male	35.0	0	0	373450	8.050	NaN	S


[4] # iloc, [에 위치 좌표를 (x,y) 로 넣어주면 된다]
data = {'Name': ['A', 'B', 'C', 'D'],
        'Year': [2001, 2032, 2013, 2000],
        'Gender': ['Male', 'Female', 'Male', 'Male']}
data_df = pd.DataFrame(data, index=['One', 'Two', 'Three', 'Four'])
data_df
data_df.iloc[0,0]

#아래 코드는 오류를 발생
data_df.iloc[0,'Name']
data_df.iloc['one', 0]

[4]-A
	Name	Year	Gender
One	A	2001	Male
Two	B	2032	Female
Three	C	2013	Male
Four	D	2000	Male

'A'


[5] # 추가예제, index를 새 컬럼으로 옮기고, index 자체를 +1해서 바꾼 상황
# 결론적으로 index 값을 변경하든 말든, 위치기반이기 때 위치의 좌표를 읽는다
# data_df를 reset_index() 로 새로운 숫자형 인덱스 생성, 그리고 컬럼명도 변경
data_df_reset = data_df.reset_index()
data_df_reset = data_df_reset.rename(columns={'index':'old_index'})

# index 값에 1을 더해서 1부터 시작하는 새로운 index값 생성
data_df_reset.index = data_df_reset.index+1
data_df_reset

data_df_reset.iloc[0,1]

[5]-A
	old_index	Name	Year	Gender
1	One	A	2001	Male
2	Two	B	2032	Female
3	Three	C	2013	Male
4	Four	D	2000	Male

'A'


[6] #loc[]: 명칭기반 인덱싱을 제공
data_df

data_df.loc['One', 'Name']

[6]-A

Name	Year	Gender
One	A	2001	Male
Two	B	2032	Female
Three	C	2013	Male
Four	D	2000	Male

'A'


[7] #loc에서 인덱스값은 명칭이기 때문에, 인덱스값을 써도 먹힌다. [숫자, 컬럼명] 이 된다는 소리다. 
data_df_reset.loc[1,'Name']

# 아래 코드는 오류를 발생시킴, 왜냐면 0이라는 명칭값이 없으니까 
data_df_reset.loc[0, 'Name']

[7]-A
'A'


[8] #Slicing 하기, 위치기반은 편하게 좌표쓰면 되고, 명칭기반은 행쪽 index 숫자를 조정한거만 아니라면 위치기반과 같은 숫자라고 보면 됨 
print('위치기반 iloc slicing \n', data_df.iloc[0:1, 0], '\n')
print('명칭기반 loc slicing \n', data_df.loc['One':'Two', 'Name'])

[8]-A
위치기반 iloc slicing 
 One    A
Name: Name, dtype: object 

명칭기반 loc slicing 
 One    A
Two    B
Name: Name, dtype: object


[9] # Boolean indexing(불린 인덱싱)
# 헷갈리는 위치기반, 명칭기반 인덱싱을 사용할 필요없이 조건식을 []안에 기입하여 간편하게 필터링을 수행
# 데이터 프레임 형태로 일부 필터만 걸려서 출력이 된다. 
titanic_df = pd.read_csv('titanic_train.csv')
titanic_boolean = titanic_df[titanic_df['Age']>60]
print(type(titanic_boolean))
titanic_boolean.head(3)

[9]-A
<class 'pandas.core.frame.DataFrame'>

PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
33	34	0	2	Wheadon, Mr. Edward H	male	66.0	0	0	C.A. 24579	10.5000	NaN	S
54	55	0	1	Ostby, Mr. Engelhart Cornelius	male	65.0	0	1	113509	61.9792	B30	C
96	97	0	1	Goldschmidt, Mr. George B	male	71.0	0	0	PC 17754	34.6542	A5	C


[10] #불린 인덱싱 원리, 필터를 건 값들이 series 형태로 0,1,2,3 행이 각각 true/false로 구분이 된다. 
titanic_df['Age'] > 60

[10]-A
0      False
1      False
2      False
3      False
4      False
       ...  
886    False
887    False
888    False
889    False
890    False
Name: Age, Length: 891, dtype: bool


[10-2] #앞서 언급한데로 조건식만 출력해보면 bool 형태의 series임을 알 수 있다.
var1 = titanic_df['Age'] > 60
print(type(var1))

[10-2]-A
<class 'pandas.core.series.Series'>


[11] # [][] 형태로 다중 필터를 걸수도 있다. 순서는 무관 
titanic_df[titanic_df['Age']>60][['Age', 'Name']].head(3)

# 필터걸때 원하는 컬럼 순서부터 입력하면 그 순서대로 정렬됨
titanic_df[['Name', 'Age']][titanic_df['Age']>60].head(3)

[11]-A
	Age	Name
33	66.0	Wheadon, Mr. Edward H
54	65.0	Ostby, Mr. Engelhart Cornelius
96	71.0	Goldschmidt, Mr. George B


Name	Age
33	Wheadon, Mr. Edward H	66.0
54	Ostby, Mr. Engelhart Cornelius	65.0
96	Goldschmidt, Mr. George B	71.0


[12] #loc[boolean 식]도 가능하다. 이경우에 행에 [33,54,96] 가 들어간거라고 보면 된다. 
titanic_df.loc[titanic_df['Age']>60, ['Name', 'Age']].head(3)

[12]-A
Name	Age
33	Wheadon, Mr. Edward H	66.0
54	Ostby, Mr. Engelhart Cornelius	65.0
96	Goldschmidt, Mr. George B	71.0

[13] #논리 연산자로 결합된 조건식도 boolean indexing으로 적용 가능
titanic_df[(titanic_df['Age']>60) & (titanic_df['Pclass']==1) & (titanic_df['Sex']=='female')]

# 가독성을 위해 이렇게 작성해도 무방하다(위/아래는 같은 거) 
cond1 = titanic_df['Age'] > 60
cond2 = titanic_df['Pclass'] == 1
cond3 = titanic_df['Sex'] == 'female'
titanic_df[cond1 & cond2 & cond3]

[13]-A
	PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
275	276	1	1	Andrews, Miss. Kornelia Theodosia	female	63.0	1	0	13502	77.9583	D7	S
829	830	1	1	Stone, Mrs. George Nelson (Martha Evelyn)	female	62.0	0	0	113572	80.0000	B28	NaN

