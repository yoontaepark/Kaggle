# 5. pandas

** 요약
아래의 함수들을 외울 것
1) import numpy as np : 넘파이 라이브러리 호출, np는 코드짤때 쉬우라고 약어로
2) np.sort(변수) : 오름차순으로 변수 array를 sort 한다.


-read_csv()
read_csv()를 이용하여 csv 파일을 편리하게 DataFrame으로 로딩합니다.
read_csv()의 sep 인자를 콤마(,)가 아닌 다른 분리자로 변경하여 다른 유형의 파일도 로드가 가능합니다.
띄어쓰기 두번해야 줄넘어감


-실습
[1] #read_csv() 함수를 사용하여 DataFrame으로 로딩, 이때 파일 확장자가 .csv일 필요는 없다. 
import pandas as pd
titanic_df = pd.read_csv('titanic_train.csv')
print('titanic 변수 type:', type(titanic_df))

->
titanic 변수 type: <class 'pandas.core.frame.DataFrame'>


[2] #.head(), ()가 비어있다면 기본적으로 5개의 데이터를 보여줌
titanic_df.head() #default가 5개 데이터를 보여줌, 첫 column은 index 값으로 column명이 없다.

->
PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
0	1	0	3	Braund, Mr. Owen Harris	male	22.0	1	0	A/5 21171	7.2500	NaN	S
1	2	1	1	Cumings, Mrs. John Bradley (Florence Briggs Th...	female	38.0	1	0	PC 17599	71.2833	C85	C
2	3	1	3	Heikkinen, Miss. Laina	female	26.0	0	0	STON/O2. 3101282	7.9250	NaN	S
3	4	1	1	Futrelle, Mrs. Jacques Heath (Lily May Peel)	female	35.0	1	0	113803	53.1000	C123	S
4	5	0	3	Allen, Mr. William Henry	male	35.0	0	0	373450	8.0500	NaN	S

[3] #DataFrame 생성하기
dic1 = {'Name': ['Ace', 'Boy', 'Car', 'Dry'],
        'Year': [1999, 2000, 2001, 2002],
        'Gender': ['Male', 'Female', 'Male', 'Male']
       }

# 딕셔너리를 DataFrame으로 변환
data_df = pd.DataFrame(dic1)
print(data_df)
print('#'*30)

# 새로운 컬럼명을 추가, 추가뿐만 아니라 갈아끼우는 것도 가능하다. Column명 불일치시 NaN이 뜬다. 
data_df = pd.DataFrame(dic1, columns=['Name', 'Year', 'Gende', 'Age'])
print(data_df)
print('#'*30)

# 인덱스를 새로운 값으로 할당, 위의 컬럼명 추가와 동시에 해도 된다. (,를 통해)
data_df = pd.DataFrame(dic1, index=['one', 'two', 'three', 'four'])
print(data_df)
print('#'*30)

->
 Name  Year  Gender
0  Ace  1999    Male
1  Boy  2000  Female
2  Car  2001    Male
3  Dry  2002    Male
##############################
  Name  Year Gende  Age
0  Ace  1999   NaN  NaN
1  Boy  2000   NaN  NaN
2  Car  2001   NaN  NaN
3  Dry  2002   NaN  NaN
##############################
      Name  Year  Gender
one    Ace  1999    Male
two    Boy  2000  Female
three  Car  2001    Male
four   Dry  2002    Male
##############################


[3] # DateFrame의 컬럼명과 인덱스
print('Colums:', titanic_df.columns)
print('index:', titanic_df.index) #인덱스 value는 아니고, 인덱스가 몇개있는지를 알려준다
print('index values:', titanic_df.index.values) 

->
Colums: Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],
      dtype='object')
index: RangeIndex(start=0, stop=891, step=1)
index values: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521
 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539
 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557
 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575
 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593
 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611
 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629
 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647
 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665
 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683
 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719
 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737
 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755
 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773
 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791
 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809
 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827
 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845
 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863
 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881
 882 883 884 885 886 887 888 889 890]
 
 
[4] # DataFrame에서 Series 추출 및 DataFrame 필터링 추출
#DataFrame객체에서 []연산자내에 한개의 컬럼만 입력하면 Series객체를 반환
series = titanic_df['Name']
print(series.head(3))
print('Type:', type(series))

#DataFrame객체에서 []연산자내에 여러개의 컬럼을 리스트로 입력하면 그 컬럼들로 구성된 DataFrame 변환
filtered_df = titanic_df[['Name', 'Age']]
print(filtered_df.head(3))
print('Type:', type(filtered_df))

#DataFrame객체에서 []연산자내에 한개의 컬럼을 리스트로 입력하면 그 컬럼들로 구성된 DataFrame 변환
one_col_df = titanic_df[['Name']]
print(one_col_df.head(3))
print('Type:', type(one_col_df))

->
0                              Braund, Mr. Owen Harris
1    Cumings, Mrs. John Bradley (Florence Briggs Th...
2                               Heikkinen, Miss. Laina
Name: Name, dtype: object
Type: <class 'pandas.core.series.Series'>
                                                Name   Age
0                            Braund, Mr. Owen Harris  22.0
1  Cumings, Mrs. John Bradley (Florence Briggs Th...  38.0
2                             Heikkinen, Miss. Laina  26.0
Type: <class 'pandas.core.frame.DataFrame'>
                                                Name
0                            Braund, Mr. Owen Harris
1  Cumings, Mrs. John Bradley (Florence Briggs Th...
2                             Heikkinen, Miss. Laina
Type: <class 'pandas.core.frame.DataFrame'>


[5] # shape: DateFrame의 행(Row)와 열(Column)크기를 가지고 있는 속성
print('DataFrame 크기:', titanic_df.shape) #(row, column), index는 컬럼에 포함되지 않음
->
DataFrame 크기: (891, 12)


[6] # info(): DataFrame 내의 컬럼명, 데이터 타입, Null 건수, 데이터 건수 정보를 제공
titanic_df.info() #진짜 많이 쓰는듯, non-null 개수를 출력해줌, 메모리 얼마나 쓰는지도 보임
->
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  891 non-null    int64  
 1   Survived     891 non-null    int64  
 2   Pclass       891 non-null    int64  
 3   Name         891 non-null    object 
 4   Sex          891 non-null    object 
 5   Age          714 non-null    float64
 6   SibSp        891 non-null    int64  
 7   Parch        891 non-null    int64  
 8   Ticket       891 non-null    object 
 9   Fare         891 non-null    float64
 10  Cabin        204 non-null    object 
 11  Embarked     889 non-null    object 
dtypes: float64(2), int64(5), object(5)
memory usage: 83.7+ KB


[7] # describe(): 데이터값들의 평균, 표준편차, 4분위 분포도를 제공, 숫자형 컬럼들에 대해 해당 정보를 제공하며, null 값은 제외하고 계산함
titanic_df.describe()
->
	PassengerId	Survived	Pclass	Age	SibSp	Parch	Fare
count	891.000000	891.000000	891.000000	714.000000	891.000000	891.000000	891.000000
mean	446.000000	0.383838	2.308642	29.699118	0.523008	0.381594	32.204208
std	257.353842	0.486592	0.836071	14.526497	1.102743	0.806057	49.693429
min	1.000000	0.000000	1.000000	0.420000	0.000000	0.000000	0.000000
25%	223.500000	0.000000	2.000000	20.125000	0.000000	0.000000	7.910400
50%	446.000000	0.000000	3.000000	28.000000	0.000000	0.000000	14.454200
75%	668.500000	1.000000	3.000000	38.000000	1.000000	0.000000	31.000000
max	891.000000	1.000000	3.000000	80.000000	8.000000	6.000000	512.329200

[8] 
# value_counts()
동일한 개별 데이터 값이 몇건이 있는지 정보를 제공함. 즉, 개별 데이터값의 분포도를 제공함.
단, value_counts()는 Series 객체에서만 호출될 수 있음
따라서, 반드시 DataFrame을 단일 컬럼으로 입력하여 Series로 변환한 뒤 호출함

value_counts = titanic_df['Pclass'].value_counts() #series 만들고나서 value_counts() 함수를 쓴다. 
print(value_counts)
->
3    491
1    216
2    184
Name: Pclass, dtype: int64

[9] #column을 한개만 잡으면 series가 된다
titanic_pclass = titanic_df['Pclass']
print(type(titanic_pclass)) #series임을 알 수 있다(당연하게도)
->
<class 'pandas.core.series.Series'>


[10] #sort_values() by=정렬컬럼, ascending=True(default값임) 또는 False로 오름/내림차순 정렬
titanic_df.sort_values(by='Pclass', ascending=False) #ascending 조건 안넣으면 default가 True임
titanic_df[['Name', 'Age']].sort_values(by='Age')
titanic_df[['Name', 'Age', 'Pclass']].sort_values(by=['Pclass', 'Age']) #다중 소트는 리스트 만들어서 하기, 왼쪽꺼부터 소트됨

->
Name	Age	Pclass
305	Allison, Master. Hudson Trevor	0.92	1
297	Allison, Miss. Helen Loraine	2.00	1
445	Dodge, Master. Washington	4.00	1
802	Carter, Master. William Thornton II	11.00	1
435	Carter, Miss. Lucile Polk	14.00	1
...	...	...	...
859	Razi, Mr. Raihed	NaN	3
863	Sage, Miss. Dorothy Edith "Dolly"	NaN	3
868	van Melkebeke, Mr. Philemon	NaN	3
878	Laleff, Mr. Kristo	NaN	3
888	Johnston, Miss. Catherine Helen "Carrie"	NaN	3
891 rows × 3 columns
